{"version":3,"sources":["main.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","navigator","protocol","serviceWorker","register","then","registration","onupdatefound","controller","installingWorker","installing","onstatechange","state","Error","e","console","error","$","document","ready","forEach","event","addEventListener","load","hash","slice","scrollTo","scroll","$window","$body","$panel","scrollTop","height","each","$this","this","position","top","removeClass","index","css","join","addClass","data"],"mappings":";;;;;;;;;;;;;;;;;;CAmBA,WACA,YAMA,IAAAA,GAAAC,QAAA,cAAAC,OAAAC,SAAAC,UAEA,UAAAF,OAAAC,SAAAC,UAEAF,OAAAC,SAAAC,SAAAC,MACA,0DAIA,kBAAAC,aACA,WAAAJ,OAAAC,SAAAI,UAAAP,IACAM,UAAAE,cAAAC,SAAA,qBACAC,KAAA,SAAAC,GAEAA,EAAAC,cAAA,WAKA,GAAAN,UAAAE,cAAAK,WAAA,CAGA,GAAAC,GAAAH,EAAAI,UAEAD,GAAAE,cAAA,WACA,OAAAF,EAAAG,OACA,IAAA,YAKA,KAEA,KAAA,YACA,KAAA,IAAAC,OAAA,yDAvBAZ,SAgCA,SAAAa,GACAC,QAAAC,MAAA,4CAAAF,QAOAG,EAAAC,UAAAC,MAAA,YAEA,OAAA,cAAAC,QAAA,SAAAC,GACAxB,OAAAyB,iBAAAD,EAAA,WACAJ,EAAA,YAAAM,KAAA,YAAA1B,OAAAC,SAAA0B,KAAAC,MAAA,IAAA,QAAA,SACA5B,OAAA6B,SAAA,IAAA,OAKAT,EAAApB,QAAA8B,OAAA,WACA,GAAAC,GAAAX,EAAApB,QACAgC,EAAAZ,EAAA,QACAa,EAAAb,EAAA,WAGAU,EAAAC,EAAAG,YAAAH,EAAAI,SAAA,CAEAF,GAAAG,KAAA,WACA,GAAAC,GAAAjB,EAAAkB,KAKAD,GAAAE,WAAAC,KAAAV,GAAAO,EAAAE,WAAAC,IAAAH,EAAAF,SAAAL,IAGAE,EAAAS,YAAA,SAAAC,EAAAC,GACA,OAAAA,EAAAxC,MAAA,yBAAAyC,KAAA,OAIAZ,EAAAa,SAAA,SAAAzB,EAAAkB,MAAAQ,KAAA,eAGAhB","file":"main.min.js","sourcesContent":["/*!\n *\n *  Web Starter Kit\n *  Copyright 2015 Google Inc. All rights reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License\n *\n */\n/* eslint-env browser */\n(function() {\n  'use strict';\n\n  // Check to make sure service workers are supported in the current browser,\n  // and that the current page is accessed from a secure origin. Using a\n  // service worker from an insecure origin will trigger JS console errors. See\n  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\n  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n    );\n\n  if ('serviceWorker' in navigator &&\n      (window.location.protocol === 'https:' || isLocalhost)) {\n    navigator.serviceWorker.register('service-worker.js')\n    .then(function(registration) {\n      // updatefound is fired if service-worker.js changes.\n      registration.onupdatefound = function() {\n        // updatefound is also fired the very first time the SW is installed,\n        // and there's no need to prompt for a reload at that point.\n        // So check here to see if the page is already controlled,\n        // i.e. whether there's an existing service worker.\n        if (navigator.serviceWorker.controller) {\n          // The updatefound event implies that registration.installing is set:\n          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n          var installingWorker = registration.installing;\n\n          installingWorker.onstatechange = function() {\n            switch (installingWorker.state) {\n              case 'installed':\n                // At this point, the old content will have been purged and the\n                // fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in the page's interface.\n                break;\n\n              case 'redundant':\n                throw new Error('The installing ' +\n                                'service worker became redundant.');\n\n              default:\n                // Ignore\n            }\n          };\n        }\n      };\n    }).catch(function(e) {\n      console.error('Error during service worker registration:', e);\n    });\n  }\n})();\n\n\n\n$(document).ready(function(){\n\n  ['load','hashchange'].forEach(function(event) {\n    window.addEventListener(event, function() {\n      $('#content').load('content/' + (window.location.hash.slice(1) || 'work') + '.html')\n      window.scrollTo(500,0);\n    })\n  })\n\n  /*   BACKGROUND COLOR CHANGE       */\n  $(window).scroll(function() {\n    var $window = $(window),\n      $body = $('body'),\n      $panel = $('section');\n  \n    // Change 33% earlier than scroll position so colour is there when you arrive.\n    var scroll = $window.scrollTop() + ($window.height() / 3);\n \n    $panel.each(function () {\n      var $this = $(this);\n    \n      // if position is within range of this panel.\n      // So position of (position of top of div <= scroll position) && (position of        bottom of div > scroll position).\n      // Remember we set the scroll to 33% earlier in scroll var.\n      if ($this.position().top <= scroll && $this.position().top + $this.height() > scroll) {\n          \n        // Remove all classes on body with color-\n        $body.removeClass(function (index, css) {\n          return (css.match (/(^|\\s)color-\\S+/g) || []).join(' ');\n        });\n       \n        // Add class of currently active div\n        $body.addClass('color-' + $(this).data('color'));\n      }\n    });    \n  }).scroll();\n})\n\n\n"]}